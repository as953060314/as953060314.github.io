<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[homework_week4]]></title>
    <url>%2F2018%2F04%2F01%2Fhomework-week4%2F</url>
    <content type="text"><![CDATA[Homework of week 4Chapter 7 &amp;&amp; Chapter 8 7-4 比萨配料 ：编写一个循环，提示用户输入一系列的比萨配料，并在用户输入’quit’ 时结束循环。每当用户输入一种配料后，都打印一条消息，说我们会在比萨中添加这种配料。 7-6 三个出口 ：以另一种方式完成练习7-4或练习7-5，在程序中采取如下所有做法。 在while 循环中使用条件测试来结束循环。 使用变量active 来控制循环结束的时机。 使用break 语句在用户输入’quit’ 时退出循环。 123456789101112131415161718while 1: chara=input("Please input the material you want to add: ") if chara=="quit": break print(chara,"will be added to your pizza")active=1while active: chara=input("Please input the material you want to add: ") if chara=="quit": active=0 continue print(chara,"will be added to your pizza")chara=chara=input("Please input the material you want to add: ")while chara!="quit": print(chara,"will be added to your pizza") chara=chara=input("Please input the material you want to add: ") result123456789101112131415Please input the material you want to add: addadd will be added to your pizzaPlease input the material you want to add: potatopotato will be added to your pizzaPlease input the material you want to add: quitPlease input the material you want to add: girlsgirls will be added to your pizzaPlease input the material you want to add: cherrycherry will be added to your pizzaPlease input the material you want to add: quitPlease input the material you want to add: suzisuzi will be added to your pizzaPlease input the material you want to add: beefbeef will be added to your pizzaPlease input the material you want to add: quit 7-8 熟食店 ：创建一个名为sandwich_orders 的列表，在其中包含各种三明治&gt;的名字；再创建一个名为finished_sandwiches 的空列表。遍历列表sandwich_orders ，对于其中的每种三明治，都打印一条消息，如I made &gt;your tuna sandwich ，并将其移到列表finished_sandwiches 。所有三明治都制作好后，打印一条消息，将这些三明治列出来 12345678sandwich_orders=["tuna sandwich","beef sandwich","tomato sandwich","egg sandwich"]finished_sandwiches=[]while sandwich_orders: temp=sandwich_orders.pop() print("I made your ",temp) finished_sandwiches.append(temp)print("I finish all sandwich orders") result12345I made your egg sandwichI made your tomato sandwichI made your beef sandwichI made your tuna sandwichI finish all sandwich orders 8-7 专辑 ：编写一个名为make_album() 的函数，它创建一个描述音乐专辑的字典。这个函数应接受歌手的名字和专辑名，并返回一个包含这两项信息的字典。使用这个函数创建三个表示不同专辑的字典，并打印每个返回的值，以核实字典正确地存储了专辑的信息。 给函数make_album() 添加一个可选形参，以便能够存储专辑包含的歌曲数。如果调用这个函数时指定了歌曲数，就将这个值添加到表示专辑的字典中。调用这个函数，并至少在一次调用中指定专辑包含的歌曲数。 8-8 用户的专辑 ：在为完成练习8-7编写的程序中，编写一个while 循环，让用户输入一个专辑的歌手和名称。获取这些信息后，使用它们来调用函数make_album() ，并将创建的字典打印出来。在这个while 循环中，务必要提供退出途径。 123456789101112131415161718192021def make_album(name,name_album,num=1): album=&#123;"name":name,"album":name_album,"number of songs":num&#125; return albumwhile 1 : name=input("Please input the name of the singer(input \"quit\" means leave):") if name=="quit": break album=input("Please input the name of the album : ") l=make_album(name,album) print(l) print('\n')print('\n')name=input("Please input the name of the singer(input \"quit\" means leave):")album=input("Please input the name of the album : ")num=input("Please input the number of the songs: ")l=make_album(name,album,num)print(l) result1234567891011121314151617Please input the name of the singer(input &quot;quit&quot; means leave):TalyorPlease input the name of the album : Reputation&#123;&apos;name&apos;: &apos;Talyor&apos;, &apos;album&apos;: &apos;Reputation&apos;, &apos;number of songs&apos;: 1&#125;Please input the name of the singer(input &quot;quit&quot; means leave):ironyPlease input the name of the album : Hope&#123;&apos;name&apos;: &apos;irony&apos;, &apos;album&apos;: &apos;Hope&apos;, &apos;number of songs&apos;: 1&#125;Please input the name of the singer(input &quot;quit&quot; means leave):quitPlease input the name of the singer(input &quot;quit&quot; means leave):AimerPlease input the name of the album : last stardustPlease input the number of the songs: 666&#123;&apos;name&apos;: &apos;Aimer&apos;, &apos;album&apos;: &apos;last stardust&apos;, &apos;number of songs&apos;: &apos;666&apos;&#125; 8-9 魔术师 ：创建一个包含魔术师名字的列表，并将其传递给一个名为show_magicians() 的函数，这个函数打印列表中每个魔术师的名字。8-10 了不起的魔术师 ：在你为完成练习8-9而编写的程序中，编写一个名为make_great() 的函数，对魔术师列表进行修改，在每个魔术师的名字中都加入字样“theGreat”。调用函数show_magicians() ，确认魔术师列表确实变了。123456789101112131415def show_magicians(name): for n in name: print(n)def make_great(names): i=0 for name in names: name="The Great "+name names[i]=name i+=1name=["Peter","Marcos","Jyaio"]show_magicians(name)make_great(name)show_magicians(name) result123456PeterMarcosJyaioThe Great PeterThe Great MarcosThe Great Jyaio 8-12 三明治 ：编写一个函数，它接受顾客要在三明治中添加的一系列食材。这个函数只有一个形参（它收集函数调用中提供的所有食材），并打印一条消息，对顾客点的三明治进行概述。调用这个函数三次，每次都提供不同数量的实参。12345678def sandwich(*agrc): for food in agrc: print(food," will be in your sandwich") print("Please take your sandwich and have fun\n")sandwich("potato","egg","meat")sandwich("bread")sandwich("cucmber","tomato") result1234567891011potato will be in your sandwichegg will be in your sandwichmeat will be in your sandwichPlease take your sandwich and have funbread will be in your sandwichPlease take your sandwich and have funcucmber will be in your sandwichtomato will be in your sandwichPlease take your sandwich and have fun]]></content>
      <categories>
        <category>homework</category>
      </categories>
      <tags>
        <tag>homework of python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Homework of Week3]]></title>
    <url>%2F2018%2F03%2F25%2FWeek3%2F</url>
    <content type="text"><![CDATA[Homework of Chapter 5 and Chapter 6Chapter 5QUESTION5-4 外星人颜色#2 ：像练习5-3那样设置外星人的颜色，并编写一个if-else 结构。如果外星人是绿色的，就打印一条消息，指出玩家因射杀该外星人获得了5个点。如果外星人不是绿色的，就打印一条消息，指出玩家获得了10个点。12345alien_color="green"if alien_color=="green": print("You kill a green alien and get 5 points")else: print("You kill a special alien and get 10 points") resut:1You kill a green alien and get 5 points QUESTION5-5 外星人颜色#3 ：将练习5-4中的if-else 结构改为if-elif-else 结构。如果外星人是绿色的，就打印一条消息，指出玩家获得了5个点。如果外星人是黄色的，就打印一条消息，指出玩家获得了10个点。如果外星人是红色的，就打印一条消息，指出玩家获得了15个点。 5-7 喜欢的水果 ：创建一个列表，其中包含你喜欢的水果，再编写一系列独立的if 语句，检查列表中是否包含特定的水果。将该列表命名为favorite_fruits ，并在其中包含三种水果。编写5条if 语句，每条都检查某种水果是否包含在列表中，如果包含在列表中，就打印一条消息，如“You really like bananas!”。 12345678910111213141516171819alien_color="red"if alien_color=="green": print("You kill a green alien and get 5 points")elif alien_color=="yellow": print("You kill a yellow alien and get 10 points")elif alien_color=="red": print("You kill a red alien and get 15 points")favourite_fruit=["apple","pear","orange"]if "apple" in favourite_fruit: print("You really like apple")if "banana" in favourite_fruit: print("You really like banana")if "pear" in favourite_fruit: print("You really like pear")if "blue berry" in favourite_fruit: print("You really like blue berry")if "orange" in favourite_fruit: print("You really like orange") result:1234You kill a red alien and get 15 pointsYou really like appleYou really like pearYou really like orange QUESTION5-8 以特殊方式跟管理员打招呼 ：创建一个至少包含5个用户名的列表，且其中一个用户名为’admin’ 。想象你要编写代码，在每位用户登录网站后都打印一条问候消息。遍历用户名列表，并向每位用户打印一条问候消息。如果用户名为’admin’ ，就打印一条特殊的问候消息，如“Hello admin, would you like to see a status report?”。否则，打印一条普通的问候消息，如“Hello Eric, thank you for logging in again”。 5-9 处理没有用户的情形 ：在为完成练习5-8编写的程序中，添加一条if 语句，检查用户名列表是否为空。如果为空，就打印消息“We need to find some users!”。删除列表中的所有用户名，确定将打印正确的消息。 5-10 检查用户名 ：按下面的说明编写一个程序，模拟网站确保每位用户的用户名都独一无二的方式。创建一个至少包含5个用户名的列表，并将其命名为current_users 。再创建一个包含5个用户名的列表，将其命名为new_users ，并确保其中有一两个用户名也包含在列表current_users 中。遍历列表new_users ，对于其中的每个用户名，都检查它是否已被使用。如果是这样，就打印一条消息，指出需要输入别的用户名；否则，打印一条消息，指出这个用户名未被使用。确保比较时不区分大消息；换句话说，如果用户名’John’ 已被使用，应拒绝用户名’JOHN’ 。123456789101112131415161718users=["admin","John","Alex","Akaxia","Michael"]for user in users: if user=="admin": print("Hello admin, would you like to see a status report?") else : print("Hello ",user,", thank you for logging in again”")users=[]if not users: print("We need some users")currnet_users=["admin","John","Alex","Akaxia","Michael"];new_users=["Liku","Siri","ALEX","Steve","michael"]for user in new_users: if user.upper() in [s.upper() for s in currnet_users ]: print("This user name has been signed up,please use another name") else: print("This user nams is availabe") Chapter 6QUESTION6-1 人 ：使用一个字典来存储一个熟人的信息，包括名、姓、年龄和居住的城市。该字典应包含键first_name 、last_name 、age 和city 。将存储在该字典中的每项信息都打印出来。12345friend=&#123;'first name':"lex",'last name':"Dior",'age':24,'city':'Shanghai'&#125;print(friend['first name'])print(friend['last name'])print(friend['age'])print(friend['city']) result:1234lexDior24Shanghai QUESTION6-4 词汇表2 ：既然你知道了如何遍历字典，现在请整理你为完成练习6-3而编写的代码，将其中的一系列print 语句替换为一个遍历字典中的键和值的循环。 6-5 河流 ：创建一个字典，在其中存储三条大河流及其流经的国家。其中一个键—值对可能是’nile’: ‘egypt’ 。使用循环为每条河流打印一条消息，如“The Nile runs through Egypt.”。使用循环将该字典中每条河流的名字都打印出来。使用循环将该字典包含的每个国家的名字都打印出来。12345678910111213141516key=&#123; 'if':"Conditional statements", 'list':'Basic data structure', 'for':'Loop statements' &#125;for word,use in key.items(): print(word,":",use)river=&#123;'nile': 'egypt','Changjiang':'China','Huanghe':'China'&#125;for r ,country in river.items(): print(r," runs thought ",country)for r in river.keys(): print(r)for country in river.values(): print(country) result:123456789101112if : Conditional statementslist : Basic data structurefor : Loop statementsnile runs thought egyptChangjiang runs thought ChinaHuanghe runs thought ChinanileChangjiangHuangheegyptChinaChina QUESTION6-9 喜欢的地方 ：创建一个名为favorite_places 的字典。在这个字典中，将三个人的名字用作键；对于其中的每个人，都存储他喜欢的1~3个地方。为让这个练习更有趣些，可让一些朋友指出他们喜欢的几个地方。遍历这个字典，并将其中每个人的名字及其喜欢的地方打印出来。123456favorite_place=&#123;"Ezio":["Roma","Istanbul","Florence"],"Alex":["Tokoyo","Britain","Avalon"],"Wangdaye":["Beijing","Xi'an","Tibet"]&#125;for name,places in favorite_place.items(): print(name) for place in places: print(place) print('\n') result:12345678910111213141516EzioRomaIstanbulFlorenceAlexTokoyoBritainAvalonWangdayeBeijingXi&apos;anTibet]]></content>
      <categories>
        <category>homework</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[homework_week2]]></title>
    <url>%2F2018%2F03%2F17%2Fhomework-week2%2F</url>
    <content type="text"><![CDATA[Homework of Week 2##Q 3-1~3-3123456789names=["YeGuangzhi","Yinjiyi","Yangchenze"]print(names[0])print(names[1])print(names[2])for friend in names: print("Hello,", friend)Transpot=["biycle","car","plane"]for T in Transpot: print("I want to go home by ",T) ##Q 3-4~3-7123456789101112131415161718192021222324guest=["Mike","Stack","Ezio","Masiluo"]for g in guest: print("I would like to invite you to attend my party," , g)print(guest[0],"can't come")guest[0]="White_Wolf"for g in guest: print("I would like to invite you to attend my party," , g)print("I find a better table")guest.insert(0,"Bayoneta")guest.insert(2,"Steve")guest.append("Taloyer")for g in guest: print("I would like to invite you to attend my party," , g)print(len(guest))print("For some unknown reason,I can only invite two people")for g in guest[2:]: print("I am sorry about that",g) guest.pop()print(guest[0],"is in the list ")print(guest[1],"is in the list")del guest[1]del guest[0]if not guest: print("The list is empty") ##Q 3-8、4-10123456789101112131415161718192021place=["Haerbin","Tibet","Changsha","Janpan","Europe"]print(place)print(sorted(place))print(place)print(sorted(place,reverse=True))print(place)place.reverse()print(place)place.reverse()print(place)print(place)place=sorted(place)print(place)place=sorted(place,reverse=True)print(place)M1="The first three items in the list are"M2="Three items from the middle of the list are:"M3="The last three items in the list are"print(M1,place[:3])print(M2,place[1:-1])print(M3,place[-3:]) ##Q 4-3~4-9123456789101112for i in range(1,20): print(i)l=range(1,1000000)print(min(l))print(max(l))print(sum(l))l=range(1,20,2)for num in l: print(num)k=[i**3for i in range(1,10)]for num in k: print(num)]]></content>
      <categories>
        <category>homework</category>
      </categories>
      <tags>
        <tag>Python homework</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python Homework of Week 1]]></title>
    <url>%2F2018%2F03%2F09%2F2018-03-09-Homework-Week-1%2F</url>
    <content type="text"><![CDATA[Homework of Week 1Question:2-1,2-2 1234message="hello world"print(message)message="World is cruel"print(message) Question:2-3,2-4,2-5,2-7,2-1012345678910111213141516171819name="YeZihao"print("Hello ",name, ",would you like to learn some Python today?")print(name.title())print(name.upper())print(name.lower())print("Ezio Auditore Da Firenze said:\"Twenty two years ago, I stood where I stand now,\and watched my beloved died, betrayed by those I have called friends.\Avengence clouded my mind, it would cosumed me, were if not for the wisdom of a few strangers. \Who taught me to look past my instincts.They never preached answers, but guided me to learn from my self. \We don't need anyone to tell us what to do. Not Savonarola or the Medici. We are free to follow our own path. \There are those who will take that freedom from us, and too many of you gladly give it. \But it is our ablity to choose - whatever you think is true - that makes us human.\There is no book or teacher to give you the answers, to show you the path. \Choose your own way.Do not follow me, or anyone else.\" ")famous_name="\nEzio Auditore Da Firenze \t" #上面一堆的\是用于美观print(famous_name)print(famous_name.lstrip())print(famous_name.rstrip())print(famous_name.strip()) Question:2-8,2-9123456print(5+3)print(10-2)print(2*4)print(int(16/2))num=1024print("My favorite number is ",str(num) ) Import this123456789101112131415161718192021The Zen of Python, by Tim PetersBeautiful is better than ugly.Explicit is better than implicit.Simple is better than complex.Complex is better than complicated.Flat is better than nested.Sparse is better than dense.Readability counts.Special cases aren&apos;t special enough to break the rules.Although practicality beats purity.Errors should never pass silently.Unless explicitly silenced.In the face of ambiguity, refuse the temptation to guess.There should be one-- and preferably only one --obvious way to do it.Although that way may not be obvious at first unless you&apos;re Dutch.Now is better than never.Although never is often better than *right* now.If the implementation is hard to explain, it&apos;s a bad idea.If the implementation is easy to explain, it may be a good idea.Namespaces are one honking great idea -- let&apos;s do more of those!]]></content>
      <categories>
        <category>homework</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python & My Though]]></title>
    <url>%2F2018%2F03%2F06%2F2017-11-30-Hello-Blog%2F</url>
    <content type="text"><![CDATA[Python Python给我的第一印象，是一门简化了许多，更为接近人类表达想法的编程语言。或者说，比起C++，我感觉python像一种可以随时根据需求变成各种模样的万用工具，人们很多时候不需要知道工具工作的详细原理，只要知道它怎么使用就好了，而C++则像一堆元件，利用这堆元件我们能搭建起更贴切符合要求的工具，但这个搭建的过程并不容易，至少对于很多人来说直接使用现成的工具比自己从头搭建更加方便。当然我也不是说python不能像C++那样自己搭建工具（那些大量的第三方库就是大佬们用python搭好的工具），但那不是python的突出优点。Python的优点应该是更加简单易用，更又助于加快开发软件的速度。 好吧。上面python的优点是我在官网上和其他地方看来得。作为先学了C++的人，我再去学python，说实话我感觉各种不适应，可能是我还没有从C++的惯性思维里挣脱出来，所以自学python的时候经常感觉还不如C++好写。但我也明白这是我python并未真正熟练掌控的缘故，可能这个学期学完后我就会彻底叛变到python阵营。 Python感觉是一栋大厦，很多人都在为它添砖加瓦，官网的社区里也有很多入门的教程，我想入门python应该不会太难。 Target 这个学期我希望自己能熟练地使用python这门语言吧，很多已经能熟练地用python做很多事的大佬们都说python是一门能做很多事情的语言，只有不断去用，才能真正地熟练地掌控，光看教程是没什么用的。我希望这个学期后我能用python写一款自己的图像处理软件，相当于一个滤镜，这是我的最终愿望了（暂定）。至于更高级的东西，学校教的都没有学好，我真的没有余力去学那些大佬参加比赛或者其他之类的，但怎么说，努力吧。]]></content>
      <categories>
        <category>homework</category>
      </categories>
  </entry>
</search>
